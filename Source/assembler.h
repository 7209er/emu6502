#pragma once

#include <string>
#include <sstream>
#include <map>

class Assembler{
public:
    Assembler(std::string in);
    ~Assembler();

    std::string convert();

private:
    std::stringstream input;
    std::stringstream output;
    std::string token;
    std::string nextToken;
    std::string value;

    enum addressModeEnum{
        Accumulator, Immediate,
        ZeroPage, ZeroPageX,
        ZeroPageY, Relative,
        Absolute, AbsoluteX,
        AbsoluteY, Indirect,
        IndirectX, IndirectY,
        Implicit
    };

    addressModeEnum addressMode;

    struct OPERATION{
        std::string Implicit;  std::string Accumulator;
        std::string Immediate; std::string ZeroPage;
        std::string ZeroPageX; std::string ZeroPageY;
        std::string Relative;  std::string Absolute;
        std::string AbsoluteX; std::string AsboluteY;
        std::string Indirect;  std::string IndirectX;
        std::string IndirectY;
    };

    std::map<std::string, OPERATION> addressTable{
                // Imp  // Acc  // Imm  // ZP   // ZPX  // ZPY  // Rel  // Abs  // AbX  // AbY  // Ind  // InX  // InY
        {"ADC", {  ""    , ""    , "69"  , "65"  , "75"  , ""   , ""    , "6D"  , "7D"  , "79"  , ""    , "61"  , "71"  }},
        {"AND", {  ""    , ""    , "29"  , "25"  , "35"  , ""   , ""    , "2D"  , "3D"  , "39"  , ""    , "21"  , "31"  }},
        {"ASL", {  ""    , "0A"  , ""    , "06"  , "16"  , ""   , ""    , "0E"  , "1E"  , ""    , ""    , ""    , ""    }},
        {"BCC", {  ""    , ""    , ""    , ""    , ""    , ""   , "90"  , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"BCS", {  ""    , ""    , ""    , ""    , ""    , ""   , "B0"  , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"BEQ", {  ""    , ""    , ""    , ""    , ""    , ""   , "F0"  , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"BIT", {  ""    , ""    , ""    , "24"  , ""    , ""   , ""    , "2C"  , ""    , ""    , ""    , ""    , ""    }},
        {"BMI", {  ""    , ""    , ""    , ""    , ""    , ""   , "30"  , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"BNE", {  ""    , ""    , ""    , ""    , ""    , ""   , "D0"  , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"BPL", {  ""    , ""    , ""    , ""    , ""    , ""   , "10"  , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"BRK", {  "00"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"BVC", {  ""    , ""    , ""    , ""    , ""    , ""   , "50"  , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"BVS", {  ""    , ""    , ""    , ""    , ""    , ""   , "70"  , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"CLC", {  "18"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"CLD", {  "D8"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"CLI", {  "58"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"CLV", {  "B8"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"CMP", {  ""    , ""    , "C9"  , "C5"  , "D5"  , ""   , ""    , "CD"  , "DD"  , "D9"  , ""    , "C1"  , "D1"  }},
        {"CPX", {  ""    , ""    , "E0"  , "E4"  , ""    , ""   , ""    , "EC"  , ""    , ""    , ""    , ""    , ""    }},
        {"CPY", {  ""    , ""    , "C0"  , "C4"  , ""    , ""   , ""    , "CC"  , ""    , ""    , ""    , ""    , ""    }},
        {"DEC", {  ""    , ""    , ""    , "C6"  , "D6"  , ""   , ""    , "CE"  , "DE"  , ""    , ""    , ""    , ""    }},
        {"DEX", {  "CA"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"DEY", {  "88"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"EOR", {  ""    , ""    , "49"  , "45"  , "55"  , ""   , ""    , "4D"  , "5D"  , "59"  , ""    , "41"  , "51"  }},
        {"INC", {  ""    , ""    , ""    , "E6"  , "F6"  , ""   , ""    , "EE"  , "FE"  , ""    , ""    , ""    , ""    }},
        {"INX", {  "E8"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"INY", {  "C8"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"JMP", {  ""    , ""    , ""    , ""    , ""    , ""   , ""    , "4C"  , ""    , ""    , "6C"  , ""    , ""    }},
        {"JSR", {  ""    , ""    , ""    , ""    , ""    , ""   , ""    , "20"  , ""    , ""    , ""    , ""    , ""    }},
        {"LDA", {  ""    , ""    , "A9"  , "A5"  , "B5"  , ""   , ""    , "AD"  , "BD"  , "B9"  , ""    , "A1"  , "B1"  }},
        {"LDX", {  ""    , ""    , "A2"  , "A6"  , ""    , "B6" , ""    , "AE"  , ""    , "BE"  , ""    , ""    , ""    }},
        {"LDY", {  ""    , ""    , "A0"  , "A4"  , "B4"  , ""   , ""    , "AC"  , "BC"  , ""    , ""    , ""    , ""    }},
        {"LSR", {  ""    , "4A"  , ""    , "46"  , "56"  , ""   , ""    , "4E"  , "5E"  , ""    , ""    , ""    , ""    }},
        {"NOP", {  "EA"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"ORA", {  ""    , ""    , "09"  , "05"  , "15"  , ""   , ""    , "0D"  , "1D"  , "19"  , ""    , "01"  , "11"  }},
        {"PHA", {  "48"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"PHP", {  "08"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"PLA", {  "68"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"PLP", {  "28"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"ROL", {  ""    , "2A"  , ""    , "26"  , "36"  , ""   , ""    , "2E"  , "3E"  , ""    , ""    , ""    , ""    }},
                // Imp  // Acc  // Imm  // ZP   // ZPX  // ZPY  // Rel  // Abs  // AbX  // AbY  // Ind  // InX  // InY
        {"ROR", {  ""    , "6A"  , ""    , "66"  , "76"  , ""   , ""    , "6E"  , "7E"  , ""    , ""    , ""    , ""    }},
        {"RTI", {  "40"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"RTS", {  "60"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"SBC", {  ""    , ""    , "E9"  , "E5"  , "F5"  , ""   , ""    , "ED"  , "FD"  , "F9"  , ""    , "E1"  , "F1"  }},
        {"SEC", {  "38"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"SED", {  "F8"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"SEI", {  "78"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"STA", {  ""    , ""    , ""    , "85"  , "95"  , ""   , ""    , "8D"  , "9D"  , "99"  , ""    , "81"  , "91"  }},
        {"STX", {  ""    , ""    , ""    , "86"  , ""    , "96" , ""    , "8E"  , ""    , ""    , ""    , ""    , ""    }},
        {"STY", {  ""    , ""    , ""    , "84"  , "94"  , ""   , ""    , "8C"  , ""    , ""    , ""    , ""    , ""    }},
        {"TAX", {  "AA"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"TAY", {  "A8"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"TSX", {  "BA"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"TXA", {  "8A"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"TXS", {  "9A"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
        {"TYA", {  "98"  , ""    , ""    , ""    , ""    , ""   , ""    , ""    , ""    , ""    , ""    , ""    , ""    }},
    };

    void getAddressmode();
    bool isHex(std::string inputStr);
    bool hasSuffix(std::string inputStr, std::string suffix);
};